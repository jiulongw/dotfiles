#+TITLE: Emacs Config
#+STARTUP: showeverything
#+OPTIONS: toc: 2

* Table of Contents :toc:
- [[#bedrock][Bedrock]]
  - [[#turn-off-global-electric-indent][Turn off global electric indent]]
  - [[#package-management-with-use-package][Package management with use-package]]
  - [[#save-backup-to-tmp-instead-of-current-directory][Save backup to $TMP instead of current directory]]
  - [[#keep-customize-settings-in-their-own-file][Keep customize settings in their own file]]
  - [[#fix-invalid-image-type-svg][Fix: invalid image type 'svg']]
- [[#ui-customization][UI Customization]]
  - [[#hide-unnecessary-ui-components][Hide unnecessary UI components]]
  - [[#display-line-numbers-and-truncated-lines][Display line numbers and truncated lines]]
  - [[#theme][Theme]]
  - [[#fonts][Fonts]]
- [[#essential-packages][Essential packages]]
  - [[#which-key---keybindings-reminder][Which key - keybindings reminder]]
  - [[#evil---vim-keybindings][Evil - Vim keybindings]]
  - [[#ivy---incremental-search][Ivy - incremental search]]
  - [[#company---auto-completion][Company - auto-completion]]
  - [[#projectile---find-project-root-directory][Projectile - find project root directory]]
  - [[#general---define-key-bindings][General - define key bindings]]
  - [[#org-mode-enhancements][Org-mode enhancements]]
  - [[#lsp---language-server][Lsp - language server]]
  - [[#magit---git-client][Magit - git client]]
- [[#development][Development]]
  - [[#go][GO]]
  - [[#python][Python]]
  - [[#cmake][CMake]]

* Bedrock

** Turn off global electric indent

#+begin_src emacs-lisp
(electric-indent-mode 0)
#+end_src

** Package management with use-package

#+begin_src emacs-lisp
  (require 'package)

  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/") t)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Save backup to $TMP instead of current directory

#+begin_src emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Keep customize settings in their own file

#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(when (file-exists-p custom-file) (load custom-file))
#+end_src

** Fix: invalid image type 'svg'

#+begin_src emacs-lisp
  (add-to-list 'image-types 'svg)
#+end_src


* UI Customization

** Hide unnecessary UI components

#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display line numbers and truncated lines

#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)
#+end_src

** Theme

#+begin_src emacs-lisp
  (use-package gruvbox-theme
    :config
    (load-theme 'gruvbox-dark-medium t))
#+end_src

** Fonts

Make sure "Source Code Pro" is installed in the system: https://github.com/adobe-fonts/source-code-pro

#+begin_src emacs-lisp
  (set-face-attribute 'default nil
                      :font "Source Code Pro"
                      :height 120
                      :weight 'normal)
  (set-face-attribute 'variable-pitch nil
                      :font (if (eq system-type 'darwin)
                                "Helvetica"
                              "Arial"
                              ) 
                      :height 120
                      :weight 'normal)
  (set-face-attribute 'fixed-pitch nil
                      :font "Source Code Pro"
                      :height 120
                      :weight 'normal)

  ;; Makes commented text and keywords italics.
  (set-face-attribute 'font-lock-comment-face nil
                      :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
                      :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "Source Code Pro-12"))
#+end_src

* Essential packages

** Which key - keybindings reminder

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode 1)
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit t
          which-key-separator " â†’ " ))
#+end_src

** Evil - Vim keybindings

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer xref magit))
    (evil-collection-init))
#+end_src

** Ivy - incremental search

#+begin_src emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    )
#+end_src

** Company - auto-completion

#+begin_src emacs-lisp
  (use-package company)
#+end_src

** Projectile - find project root directory

#+begin_src emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (setq projectile-project-root-files-bottom-up 
          '(
            ".git"
            ".hg"
            "CMakeList.txt"
            "package.json"
            "requirements.txt"
            )
          )
    )
#+end_src

** General - define key bindings

#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup)

    (general-define-key
     :states 'normal
     "-" #'dired-jump)

    ;; set up ',' as the global leader key
    (general-create-definer jw/leader-keys
      :states '(normal insert visual emacs motion)
      :keymaps 'override
      :prefix "," ;; set leader
      :global-prefix "M-,") ;; access leader in insert mode

    (jw/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer")
    )

    (jw/leader-keys
      "p" '(projectile-command-map :wk "Projectile command map")
    )
  )
#+end_src

** Org-mode enhancements

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (require 'org-tempo)
#+end_src

** Lsp - language server

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-clients-flow-server "yarn")
    (setq lsp-clients-flow-server-args '("flow" "lsp"))
    :hook (
           (c-mode . lsp)
           (c++-mode . lsp)
           (python-mode . lsp)
           (js-mode . lsp-deferred)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)
#+end_src

** Magit - git client

#+begin_src emacs-lisp
(use-package magit)
#+end_src

* Development

** GO

#+begin_src emacs-lisp
  (use-package go-mode)
  (add-hook 'go-mode-hook #'lsp-deferred)
#+end_src

** Python

#+begin_src emacs-lisp
  (use-package conda
    :init
    (setq conda-anaconda-home (expand-file-name "$CONDA_HOME"))
    (setq conda-env-home-directory (expand-file-name "$CONDA_HOME/envs")))
#+end_src

** CMake

#+begin_src emacs-lisp
  (use-package cmake-mode)
#+end_src
